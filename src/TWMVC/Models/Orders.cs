//------------------------------------------------------------------------------
// <auto-generated>
//     這個程式碼是由範本產生。
//
//     變更這個檔案可能會導致不正確的行為，而且如果已重新產生
//     程式碼，這個檔案將會遺失。
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace TWMVC.Models
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(Customers))]
    [KnownType(typeof(Employees))]
    [KnownType(typeof(Order_Details))]
    [KnownType(typeof(Shippers))]
    public partial class Orders: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region 基本屬性
    
        [DataMember]
        public int OrderID
        {
            get { return _orderID; }
            set
            {
                if (_orderID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("屬性 'OrderID' 是物件索引鍵的一部分，因此無法變更。只能在物件不加以追蹤或其處在已加入狀態，才能對索引鍵屬性進行變更。");
                    }
                    _orderID = value;
                    OnPropertyChanged("OrderID");
                }
            }
        }
        private int _orderID;
    
        [DataMember]
        public string CustomerID
        {
            get { return _customerID; }
            set
            {
                if (_customerID != value)
                {
                    ChangeTracker.RecordOriginalValue("CustomerID", _customerID);
                    if (!IsDeserializing)
                    {
                        if (Customers != null && Customers.CustomerID != value)
                        {
                            Customers = null;
                        }
                    }
                    _customerID = value;
                    OnPropertyChanged("CustomerID");
                }
            }
        }
        private string _customerID;
    
        [DataMember]
        public Nullable<int> EmployeeID
        {
            get { return _employeeID; }
            set
            {
                if (_employeeID != value)
                {
                    ChangeTracker.RecordOriginalValue("EmployeeID", _employeeID);
                    if (!IsDeserializing)
                    {
                        if (Employees != null && Employees.EmployeeID != value)
                        {
                            Employees = null;
                        }
                    }
                    _employeeID = value;
                    OnPropertyChanged("EmployeeID");
                }
            }
        }
        private Nullable<int> _employeeID;
    
        [DataMember]
        public Nullable<System.DateTime> OrderDate
        {
            get { return _orderDate; }
            set
            {
                if (_orderDate != value)
                {
                    _orderDate = value;
                    OnPropertyChanged("OrderDate");
                }
            }
        }
        private Nullable<System.DateTime> _orderDate;
    
        [DataMember]
        public Nullable<System.DateTime> RequiredDate
        {
            get { return _requiredDate; }
            set
            {
                if (_requiredDate != value)
                {
                    _requiredDate = value;
                    OnPropertyChanged("RequiredDate");
                }
            }
        }
        private Nullable<System.DateTime> _requiredDate;
    
        [DataMember]
        public Nullable<System.DateTime> ShippedDate
        {
            get { return _shippedDate; }
            set
            {
                if (_shippedDate != value)
                {
                    _shippedDate = value;
                    OnPropertyChanged("ShippedDate");
                }
            }
        }
        private Nullable<System.DateTime> _shippedDate;
    
        [DataMember]
        public Nullable<int> ShipVia
        {
            get { return _shipVia; }
            set
            {
                if (_shipVia != value)
                {
                    ChangeTracker.RecordOriginalValue("ShipVia", _shipVia);
                    if (!IsDeserializing)
                    {
                        if (Shippers != null && Shippers.ShipperID != value)
                        {
                            Shippers = null;
                        }
                    }
                    _shipVia = value;
                    OnPropertyChanged("ShipVia");
                }
            }
        }
        private Nullable<int> _shipVia;
    
        [DataMember]
        public Nullable<decimal> Freight
        {
            get { return _freight; }
            set
            {
                if (_freight != value)
                {
                    _freight = value;
                    OnPropertyChanged("Freight");
                }
            }
        }
        private Nullable<decimal> _freight;
    
        [DataMember]
        public string ShipName
        {
            get { return _shipName; }
            set
            {
                if (_shipName != value)
                {
                    _shipName = value;
                    OnPropertyChanged("ShipName");
                }
            }
        }
        private string _shipName;
    
        [DataMember]
        public string ShipAddress
        {
            get { return _shipAddress; }
            set
            {
                if (_shipAddress != value)
                {
                    _shipAddress = value;
                    OnPropertyChanged("ShipAddress");
                }
            }
        }
        private string _shipAddress;
    
        [DataMember]
        public string ShipCity
        {
            get { return _shipCity; }
            set
            {
                if (_shipCity != value)
                {
                    _shipCity = value;
                    OnPropertyChanged("ShipCity");
                }
            }
        }
        private string _shipCity;
    
        [DataMember]
        public string ShipRegion
        {
            get { return _shipRegion; }
            set
            {
                if (_shipRegion != value)
                {
                    _shipRegion = value;
                    OnPropertyChanged("ShipRegion");
                }
            }
        }
        private string _shipRegion;
    
        [DataMember]
        public string ShipPostalCode
        {
            get { return _shipPostalCode; }
            set
            {
                if (_shipPostalCode != value)
                {
                    _shipPostalCode = value;
                    OnPropertyChanged("ShipPostalCode");
                }
            }
        }
        private string _shipPostalCode;
    
        [DataMember]
        public string ShipCountry
        {
            get { return _shipCountry; }
            set
            {
                if (_shipCountry != value)
                {
                    _shipCountry = value;
                    OnPropertyChanged("ShipCountry");
                }
            }
        }
        private string _shipCountry;

        #endregion
        #region 導覽屬性
    
        [DataMember]
        public Customers Customers
        {
            get { return _customers; }
            set
            {
                if (!ReferenceEquals(_customers, value))
                {
                    var previousValue = _customers;
                    _customers = value;
                    FixupCustomers(previousValue);
                    OnNavigationPropertyChanged("Customers");
                }
            }
        }
        private Customers _customers;
    
        [DataMember]
        public Employees Employees
        {
            get { return _employees; }
            set
            {
                if (!ReferenceEquals(_employees, value))
                {
                    var previousValue = _employees;
                    _employees = value;
                    FixupEmployees(previousValue);
                    OnNavigationPropertyChanged("Employees");
                }
            }
        }
        private Employees _employees;
    
        [DataMember]
        public TrackableCollection<Order_Details> Order_Details
        {
            get
            {
                if (_order_Details == null)
                {
                    _order_Details = new TrackableCollection<Order_Details>();
                    _order_Details.CollectionChanged += FixupOrder_Details;
                }
                return _order_Details;
            }
            set
            {
                if (!ReferenceEquals(_order_Details, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("無法在 ChangeTracking 啟用時設定 FixupChangeTrackingCollection");
                    }
                    if (_order_Details != null)
                    {
                        _order_Details.CollectionChanged -= FixupOrder_Details;
                        // 這是在關聯中執行串聯刪除的主體端點。
                        // 為目前集合中的任何實體移除串聯刪除事件處理常式。
                        foreach (Order_Details item in _order_Details)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _order_Details = value;
                    if (_order_Details != null)
                    {
                        _order_Details.CollectionChanged += FixupOrder_Details;
                        // 這是在關聯中執行串聯刪除的主體端點。
                        // 為已存在於新集合的任何實體加入串聯刪除事件處理常式。
                        foreach (Order_Details item in _order_Details)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("Order_Details");
                }
            }
        }
        private TrackableCollection<Order_Details> _order_Details;
    
        [DataMember]
        public Shippers Shippers
        {
            get { return _shippers; }
            set
            {
                if (!ReferenceEquals(_shippers, value))
                {
                    var previousValue = _shippers;
                    _shippers = value;
                    FixupShippers(previousValue);
                    OnNavigationPropertyChanged("Shippers");
                }
            }
        }
        private Shippers _shippers;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        // 此實體類型是在至少一個會執行串聯刪除的關聯中的相依端點。
        // 此事件處理常式將處理刪除主體端點時所發生的通知。
        internal void HandleCascadeDelete(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                this.MarkAsDeleted();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            Customers = null;
            Employees = null;
            Order_Details.Clear();
            Shippers = null;
        }

        #endregion
        #region 關聯修復
    
        private void FixupCustomers(Customers previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Orders.Contains(this))
            {
                previousValue.Orders.Remove(this);
            }
    
            if (Customers != null)
            {
                if (!Customers.Orders.Contains(this))
                {
                    Customers.Orders.Add(this);
                }
    
                CustomerID = Customers.CustomerID;
            }
            else if (!skipKeys)
            {
                CustomerID = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Customers")
                    && (ChangeTracker.OriginalValues["Customers"] == Customers))
                {
                    ChangeTracker.OriginalValues.Remove("Customers");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Customers", previousValue);
                }
                if (Customers != null && !Customers.ChangeTracker.ChangeTrackingEnabled)
                {
                    Customers.StartTracking();
                }
            }
        }
    
        private void FixupEmployees(Employees previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Orders.Contains(this))
            {
                previousValue.Orders.Remove(this);
            }
    
            if (Employees != null)
            {
                if (!Employees.Orders.Contains(this))
                {
                    Employees.Orders.Add(this);
                }
    
                EmployeeID = Employees.EmployeeID;
            }
            else if (!skipKeys)
            {
                EmployeeID = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Employees")
                    && (ChangeTracker.OriginalValues["Employees"] == Employees))
                {
                    ChangeTracker.OriginalValues.Remove("Employees");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Employees", previousValue);
                }
                if (Employees != null && !Employees.ChangeTracker.ChangeTrackingEnabled)
                {
                    Employees.StartTracking();
                }
            }
        }
    
        private void FixupShippers(Shippers previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Orders.Contains(this))
            {
                previousValue.Orders.Remove(this);
            }
    
            if (Shippers != null)
            {
                if (!Shippers.Orders.Contains(this))
                {
                    Shippers.Orders.Add(this);
                }
    
                ShipVia = Shippers.ShipperID;
            }
            else if (!skipKeys)
            {
                ShipVia = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Shippers")
                    && (ChangeTracker.OriginalValues["Shippers"] == Shippers))
                {
                    ChangeTracker.OriginalValues.Remove("Shippers");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Shippers", previousValue);
                }
                if (Shippers != null && !Shippers.ChangeTracker.ChangeTrackingEnabled)
                {
                    Shippers.StartTracking();
                }
            }
        }
    
        private void FixupOrder_Details(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Order_Details item in e.NewItems)
                {
                    item.Orders = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Order_Details", item);
                    }
                    // 這是在關聯中執行串聯刪除的主體端點。
                    // 將事件接聽程式更新為參考新的相依端點。
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Order_Details item in e.OldItems)
                {
                    if (ReferenceEquals(item.Orders, this))
                    {
                        item.Orders = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Order_Details", item);
                        // 刪除識別關聯的相依端點。如果其目前狀態為 Added，
                        // 則可變更關聯性而不會造成此相依端點被刪除。
                        if (item.ChangeTracker.State != ObjectState.Added)
                        {
                            item.MarkAsDeleted();
                        }
                    }
                    // 這是在關聯中執行串聯刪除的主體端點。
                    // 從事件接聽程式移除先前的相依端點。
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }

        #endregion
    }
}
