//------------------------------------------------------------------------------
// <auto-generated>
//     這個程式碼是由範本產生。
//
//     變更這個檔案可能會導致不正確的行為，而且如果已重新產生
//     程式碼，這個檔案將會遺失。
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace TWMVC.Models
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(Orders))]
    [KnownType(typeof(Products))]
    public partial class Order_Details: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region 基本屬性
    
        [DataMember]
        public int OrderID
        {
            get { return _orderID; }
            set
            {
                if (_orderID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("屬性 'OrderID' 是物件索引鍵的一部分，因此無法變更。只能在物件不加以追蹤或其處在已加入狀態，才能對索引鍵屬性進行變更。");
                    }
                    if (!IsDeserializing)
                    {
                        if (Orders != null && Orders.OrderID != value)
                        {
                            Orders = null;
                        }
                    }
                    _orderID = value;
                    OnPropertyChanged("OrderID");
                }
            }
        }
        private int _orderID;
    
        [DataMember]
        public int ProductID
        {
            get { return _productID; }
            set
            {
                if (_productID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("屬性 'ProductID' 是物件索引鍵的一部分，因此無法變更。只能在物件不加以追蹤或其處在已加入狀態，才能對索引鍵屬性進行變更。");
                    }
                    if (!IsDeserializing)
                    {
                        if (Products != null && Products.ProductID != value)
                        {
                            Products = null;
                        }
                    }
                    _productID = value;
                    OnPropertyChanged("ProductID");
                }
            }
        }
        private int _productID;
    
        [DataMember]
        public decimal UnitPrice
        {
            get { return _unitPrice; }
            set
            {
                if (_unitPrice != value)
                {
                    _unitPrice = value;
                    OnPropertyChanged("UnitPrice");
                }
            }
        }
        private decimal _unitPrice;
    
        [DataMember]
        public short Quantity
        {
            get { return _quantity; }
            set
            {
                if (_quantity != value)
                {
                    _quantity = value;
                    OnPropertyChanged("Quantity");
                }
            }
        }
        private short _quantity;
    
        [DataMember]
        public float Discount
        {
            get { return _discount; }
            set
            {
                if (_discount != value)
                {
                    _discount = value;
                    OnPropertyChanged("Discount");
                }
            }
        }
        private float _discount;

        #endregion
        #region 導覽屬性
    
        [DataMember]
        public Orders Orders
        {
            get { return _orders; }
            set
            {
                if (!ReferenceEquals(_orders, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added && value != null)
                    {
                        // 這是識別關聯性的相依端點，因此如果已設定主體端點，則不可變更主體端點，
                        // 否則僅能將其設定為具有與相依端點外部索引鍵相同值的主索引鍵之實體。
                        if (OrderID != value.OrderID)
                        {
                            throw new InvalidOperationException("識別關聯性的主體端點僅可在相依端點為 Added 狀態時進行變更。");
                        }
                    }
                    var previousValue = _orders;
                    _orders = value;
                    FixupOrders(previousValue);
                    OnNavigationPropertyChanged("Orders");
                }
            }
        }
        private Orders _orders;
    
        [DataMember]
        public Products Products
        {
            get { return _products; }
            set
            {
                if (!ReferenceEquals(_products, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added && value != null)
                    {
                        // 這是識別關聯性的相依端點，因此如果已設定主體端點，則不可變更主體端點，
                        // 否則僅能將其設定為具有與相依端點外部索引鍵相同值的主索引鍵之實體。
                        if (ProductID != value.ProductID)
                        {
                            throw new InvalidOperationException("識別關聯性的主體端點僅可在相依端點為 Added 狀態時進行變更。");
                        }
                    }
                    var previousValue = _products;
                    _products = value;
                    FixupProducts(previousValue);
                    OnNavigationPropertyChanged("Products");
                }
            }
        }
        private Products _products;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        // 此實體類型是在至少一個會執行串聯刪除的關聯中的相依端點。
        // 此事件處理常式將處理刪除主體端點時所發生的通知。
        internal void HandleCascadeDelete(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                this.MarkAsDeleted();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            Orders = null;
            Products = null;
        }

        #endregion
        #region 關聯修復
    
        private void FixupOrders(Orders previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Order_Details.Contains(this))
            {
                previousValue.Order_Details.Remove(this);
            }
    
            if (Orders != null)
            {
                if (!Orders.Order_Details.Contains(this))
                {
                    Orders.Order_Details.Add(this);
                }
    
                OrderID = Orders.OrderID;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Orders")
                    && (ChangeTracker.OriginalValues["Orders"] == Orders))
                {
                    ChangeTracker.OriginalValues.Remove("Orders");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Orders", previousValue);
                }
                if (Orders != null && !Orders.ChangeTracker.ChangeTrackingEnabled)
                {
                    Orders.StartTracking();
                }
            }
        }
    
        private void FixupProducts(Products previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Order_Details.Contains(this))
            {
                previousValue.Order_Details.Remove(this);
            }
    
            if (Products != null)
            {
                if (!Products.Order_Details.Contains(this))
                {
                    Products.Order_Details.Add(this);
                }
    
                ProductID = Products.ProductID;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Products")
                    && (ChangeTracker.OriginalValues["Products"] == Products))
                {
                    ChangeTracker.OriginalValues.Remove("Products");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Products", previousValue);
                }
                if (Products != null && !Products.ChangeTracker.ChangeTrackingEnabled)
                {
                    Products.StartTracking();
                }
            }
        }

        #endregion
    }
}
