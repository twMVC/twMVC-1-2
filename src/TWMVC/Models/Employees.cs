//------------------------------------------------------------------------------
// <auto-generated>
//     這個程式碼是由範本產生。
//
//     變更這個檔案可能會導致不正確的行為，而且如果已重新產生
//     程式碼，這個檔案將會遺失。
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace TWMVC.Models
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(Employees))]
    [KnownType(typeof(Orders))]
    [KnownType(typeof(Territories))]
    public partial class Employees: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region 基本屬性
    
        [DataMember]
        public int EmployeeID
        {
            get { return _employeeID; }
            set
            {
                if (_employeeID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("屬性 'EmployeeID' 是物件索引鍵的一部分，因此無法變更。只能在物件不加以追蹤或其處在已加入狀態，才能對索引鍵屬性進行變更。");
                    }
                    _employeeID = value;
                    OnPropertyChanged("EmployeeID");
                }
            }
        }
        private int _employeeID;
    
        [DataMember]
        public string LastName
        {
            get { return _lastName; }
            set
            {
                if (_lastName != value)
                {
                    _lastName = value;
                    OnPropertyChanged("LastName");
                }
            }
        }
        private string _lastName;
    
        [DataMember]
        public string FirstName
        {
            get { return _firstName; }
            set
            {
                if (_firstName != value)
                {
                    _firstName = value;
                    OnPropertyChanged("FirstName");
                }
            }
        }
        private string _firstName;
    
        [DataMember]
        public string Title
        {
            get { return _title; }
            set
            {
                if (_title != value)
                {
                    _title = value;
                    OnPropertyChanged("Title");
                }
            }
        }
        private string _title;
    
        [DataMember]
        public string TitleOfCourtesy
        {
            get { return _titleOfCourtesy; }
            set
            {
                if (_titleOfCourtesy != value)
                {
                    _titleOfCourtesy = value;
                    OnPropertyChanged("TitleOfCourtesy");
                }
            }
        }
        private string _titleOfCourtesy;
    
        [DataMember]
        public Nullable<System.DateTime> BirthDate
        {
            get { return _birthDate; }
            set
            {
                if (_birthDate != value)
                {
                    _birthDate = value;
                    OnPropertyChanged("BirthDate");
                }
            }
        }
        private Nullable<System.DateTime> _birthDate;
    
        [DataMember]
        public Nullable<System.DateTime> HireDate
        {
            get { return _hireDate; }
            set
            {
                if (_hireDate != value)
                {
                    _hireDate = value;
                    OnPropertyChanged("HireDate");
                }
            }
        }
        private Nullable<System.DateTime> _hireDate;
    
        [DataMember]
        public string Address
        {
            get { return _address; }
            set
            {
                if (_address != value)
                {
                    _address = value;
                    OnPropertyChanged("Address");
                }
            }
        }
        private string _address;
    
        [DataMember]
        public string City
        {
            get { return _city; }
            set
            {
                if (_city != value)
                {
                    _city = value;
                    OnPropertyChanged("City");
                }
            }
        }
        private string _city;
    
        [DataMember]
        public string Region
        {
            get { return _region; }
            set
            {
                if (_region != value)
                {
                    _region = value;
                    OnPropertyChanged("Region");
                }
            }
        }
        private string _region;
    
        [DataMember]
        public string PostalCode
        {
            get { return _postalCode; }
            set
            {
                if (_postalCode != value)
                {
                    _postalCode = value;
                    OnPropertyChanged("PostalCode");
                }
            }
        }
        private string _postalCode;
    
        [DataMember]
        public string Country
        {
            get { return _country; }
            set
            {
                if (_country != value)
                {
                    _country = value;
                    OnPropertyChanged("Country");
                }
            }
        }
        private string _country;
    
        [DataMember]
        public string HomePhone
        {
            get { return _homePhone; }
            set
            {
                if (_homePhone != value)
                {
                    _homePhone = value;
                    OnPropertyChanged("HomePhone");
                }
            }
        }
        private string _homePhone;
    
        [DataMember]
        public string Extension
        {
            get { return _extension; }
            set
            {
                if (_extension != value)
                {
                    _extension = value;
                    OnPropertyChanged("Extension");
                }
            }
        }
        private string _extension;
    
        [DataMember]
        public byte[] Photo
        {
            get { return _photo; }
            set
            {
                if (_photo != value)
                {
                    _photo = value;
                    OnPropertyChanged("Photo");
                }
            }
        }
        private byte[] _photo;
    
        [DataMember]
        public string Notes
        {
            get { return _notes; }
            set
            {
                if (_notes != value)
                {
                    _notes = value;
                    OnPropertyChanged("Notes");
                }
            }
        }
        private string _notes;
    
        [DataMember]
        public Nullable<int> ReportsTo
        {
            get { return _reportsTo; }
            set
            {
                if (_reportsTo != value)
                {
                    ChangeTracker.RecordOriginalValue("ReportsTo", _reportsTo);
                    if (!IsDeserializing)
                    {
                        if (Employees2 != null && Employees2.EmployeeID != value)
                        {
                            Employees2 = null;
                        }
                    }
                    _reportsTo = value;
                    OnPropertyChanged("ReportsTo");
                }
            }
        }
        private Nullable<int> _reportsTo;
    
        [DataMember]
        public string PhotoPath
        {
            get { return _photoPath; }
            set
            {
                if (_photoPath != value)
                {
                    _photoPath = value;
                    OnPropertyChanged("PhotoPath");
                }
            }
        }
        private string _photoPath;

        #endregion
        #region 導覽屬性
    
        [DataMember]
        public TrackableCollection<Employees> Employees1
        {
            get
            {
                if (_employees1 == null)
                {
                    _employees1 = new TrackableCollection<Employees>();
                    _employees1.CollectionChanged += FixupEmployees1;
                }
                return _employees1;
            }
            set
            {
                if (!ReferenceEquals(_employees1, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("無法在 ChangeTracking 啟用時設定 FixupChangeTrackingCollection");
                    }
                    if (_employees1 != null)
                    {
                        _employees1.CollectionChanged -= FixupEmployees1;
                    }
                    _employees1 = value;
                    if (_employees1 != null)
                    {
                        _employees1.CollectionChanged += FixupEmployees1;
                    }
                    OnNavigationPropertyChanged("Employees1");
                }
            }
        }
        private TrackableCollection<Employees> _employees1;
    
        [DataMember]
        public Employees Employees2
        {
            get { return _employees2; }
            set
            {
                if (!ReferenceEquals(_employees2, value))
                {
                    var previousValue = _employees2;
                    _employees2 = value;
                    FixupEmployees2(previousValue);
                    OnNavigationPropertyChanged("Employees2");
                }
            }
        }
        private Employees _employees2;
    
        [DataMember]
        public TrackableCollection<Orders> Orders
        {
            get
            {
                if (_orders == null)
                {
                    _orders = new TrackableCollection<Orders>();
                    _orders.CollectionChanged += FixupOrders;
                }
                return _orders;
            }
            set
            {
                if (!ReferenceEquals(_orders, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("無法在 ChangeTracking 啟用時設定 FixupChangeTrackingCollection");
                    }
                    if (_orders != null)
                    {
                        _orders.CollectionChanged -= FixupOrders;
                        // 這是在關聯中執行串聯刪除的主體端點。
                        // 為目前集合中的任何實體移除串聯刪除事件處理常式。
                        foreach (Orders item in _orders)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _orders = value;
                    if (_orders != null)
                    {
                        _orders.CollectionChanged += FixupOrders;
                        // 這是在關聯中執行串聯刪除的主體端點。
                        // 為已存在於新集合的任何實體加入串聯刪除事件處理常式。
                        foreach (Orders item in _orders)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("Orders");
                }
            }
        }
        private TrackableCollection<Orders> _orders;
    
        [DataMember]
        public TrackableCollection<Territories> Territories
        {
            get
            {
                if (_territories == null)
                {
                    _territories = new TrackableCollection<Territories>();
                    _territories.CollectionChanged += FixupTerritories;
                }
                return _territories;
            }
            set
            {
                if (!ReferenceEquals(_territories, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("無法在 ChangeTracking 啟用時設定 FixupChangeTrackingCollection");
                    }
                    if (_territories != null)
                    {
                        _territories.CollectionChanged -= FixupTerritories;
                    }
                    _territories = value;
                    if (_territories != null)
                    {
                        _territories.CollectionChanged += FixupTerritories;
                    }
                    OnNavigationPropertyChanged("Territories");
                }
            }
        }
        private TrackableCollection<Territories> _territories;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            Employees1.Clear();
            Employees2 = null;
            Orders.Clear();
            Territories.Clear();
        }

        #endregion
        #region 關聯修復
    
        private void FixupEmployees2(Employees previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Employees1.Contains(this))
            {
                previousValue.Employees1.Remove(this);
            }
    
            if (Employees2 != null)
            {
                if (!Employees2.Employees1.Contains(this))
                {
                    Employees2.Employees1.Add(this);
                }
    
                ReportsTo = Employees2.EmployeeID;
            }
            else if (!skipKeys)
            {
                ReportsTo = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Employees2")
                    && (ChangeTracker.OriginalValues["Employees2"] == Employees2))
                {
                    ChangeTracker.OriginalValues.Remove("Employees2");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Employees2", previousValue);
                }
                if (Employees2 != null && !Employees2.ChangeTracker.ChangeTrackingEnabled)
                {
                    Employees2.StartTracking();
                }
            }
        }
    
        private void FixupEmployees1(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Employees item in e.NewItems)
                {
                    item.Employees2 = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Employees1", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Employees item in e.OldItems)
                {
                    if (ReferenceEquals(item.Employees2, this))
                    {
                        item.Employees2 = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Employees1", item);
                    }
                }
            }
        }
    
        private void FixupOrders(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Orders item in e.NewItems)
                {
                    item.Employees = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Orders", item);
                    }
                    // 這是在關聯中執行串聯刪除的主體端點。
                    // 將事件接聽程式更新為參考新的相依端點。
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Orders item in e.OldItems)
                {
                    if (ReferenceEquals(item.Employees, this))
                    {
                        item.Employees = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Orders", item);
                    }
                    // 這是在關聯中執行串聯刪除的主體端點。
                    // 從事件接聽程式移除先前的相依端點。
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void FixupTerritories(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Territories item in e.NewItems)
                {
                    if (!item.Employees.Contains(this))
                    {
                        item.Employees.Add(this);
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Territories", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Territories item in e.OldItems)
                {
                    if (item.Employees.Contains(this))
                    {
                        item.Employees.Remove(this);
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Territories", item);
                    }
                }
            }
        }

        #endregion
    }
}
